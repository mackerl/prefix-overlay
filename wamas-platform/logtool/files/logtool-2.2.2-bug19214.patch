diff -ru logtool-2.2.2.orig/src/ClientHandler.cc logtool-2.2.2/src/ClientHandler.cc
--- logtool-2.2.2.orig/src/ClientHandler.cc	2009-03-10 13:25:11 +0100
+++ logtool-2.2.2/src/ClientHandler.cc	2009-03-10 15:15:17 +0100
@@ -179,47 +179,60 @@
     SupportedProtocols::const_iterator used;
     std::string handshake;
     std::stringstream data;
+	std::string receivedData;
     
     // reveive handshake message from client
     FD_ZERO(&readfd);
     line_->registerSocket(&readfd);
     struct timeval timeout;
+
     do {
-        if ( line_->receive(&readfd) ) {
-            std::string receivedData;
-            size_t som, sep, tmp, len, msgLen;
-
-            receivedData = line_->receivedData().str();
-            len = receivedData.size();
-
-            tmp = 0;
-            while ( (som=receivedData.find(LOG_SOM, tmp)) < len ) {
-                tmp = som+strlen(LOG_SOM);
-                if ( (sep=receivedData.find(LOG_SEP, tmp)) < len ) {
-                    msgLen = strtoul(&receivedData[tmp],0,10);
-
-                    if ( len-sep-strlen(LOG_SEP) >= msgLen ) {
-                        try {
-                            client = hsProt->parseHandshake(
-                                    std::string(receivedData,sep+strlen(LOG_SEP), msgLen));
-                            finished = true;
-                            messages_ = std::string(receivedData, sep+strlen(LOG_SEP)+msgLen); 
-                            break;
-                        }
-                        catch (LogToolError& e) {
-                            // was not handshake messge -> try next
-                        }
-                    }
-                    tmp = sep+strlen(LOG_SEP)+msgLen;
-                }
-            } 
-        }
-        else {
-            timeout.tv_sec = 0;
-            timeout.tv_usec = 10000; /* 10ms */
+		unsigned int tries = 0;
+
+		while(receivedData.find(LOG_SEP, 0) == std::string::npos) {
+			if ( line_->receive(&readfd) ) {
+				receivedData += line_->receivedData().str();
+			} else {
+				timeout.tv_sec = 0;
+				timeout.tv_usec = 10000; /* 10ms */
+
+				SockSelect(0, NULL, NULL, NULL, &timeout);
+				
+				tries++;
+
+				if(tries > 100) {
+					/* Aproximately a second elapsed. don't loop forever! */
+					throw LogToolError("handshake timed out.");
+				}
+			}
+		}
+
+		size_t som, sep, tmp, len, msgLen;
+
+		len = receivedData.length();
+
+		tmp = 0;
+		while ( (som=receivedData.find(LOG_SOM, tmp)) < len ) {
+			tmp = som+strlen(LOG_SOM);
+			if ( (sep=receivedData.find(LOG_SEP, tmp)) < len ) {
+				msgLen = strtoul(&receivedData[tmp],0,10);
+
+				if ( len-sep-strlen(LOG_SEP) >= msgLen ) {
+					try {
+						client = hsProt->parseHandshake(
+								std::string(receivedData,sep+strlen(LOG_SEP), msgLen));
+						finished = true;
+						messages_ = std::string(receivedData, sep+strlen(LOG_SEP)+msgLen); 
+						break;
+					}
+					catch (LogToolError& e) {
+						// was not handshake messge -> try next
+					}
+				}
+				tmp = sep+strlen(LOG_SEP)+msgLen;
+			}
+		} 
 
-            SockSelect(0, NULL, NULL, NULL, &timeout);
-        }
     } while ( !finished );
 
     // agree to common protocol
diff -ru logtool-2.2.2.orig/src/LogClientLogger.cc logtool-2.2.2/src/LogClientLogger.cc
--- logtool-2.2.2.orig/src/LogClientLogger.cc	2009-03-10 13:25:11 +0100
+++ logtool-2.2.2/src/LogClientLogger.cc	2009-03-10 15:09:13 +0100
@@ -279,6 +279,7 @@
         SupportedProtocols::const_iterator iter;
         std::stringstream data;
         std::string handshake;
+		std::string receivedData;
         ProtocolPtr hsProt  = ProtocolHandler::instance().getHandshakeProtocol();
         bool finished = false;
         
@@ -287,45 +288,55 @@
         if ( ! conn_.send(data.str()) ) {
             return (false);
         }
-        
-        do {
-            if ( conn_.receive() ) {
-                std::string receivedData;
-                size_t som, sep, tmp, len, msgLen;
-
-                receivedData = conn_.receivedData().str();
-                len = receivedData.size();
-
-                tmp = 0;
-                while ( (som=receivedData.find(LOG_SOM, tmp)) < len ) {
-                    tmp = som+strlen(LOG_SOM);
-
-                    if ( (sep=receivedData.find(LOG_SEP, tmp)) < len ) {
-                        msgLen = strtoul(&receivedData[tmp],0,10);
-                        if ( len-sep-strlen(LOG_SEP) >= msgLen ) {
-                             try {
-                                protocols = hsProt->parseHandshake(
-                                        std::string(receivedData,sep+strlen(LOG_SEP), msgLen));
-                                finished = true;
-                                //messages_ = std::string(receivedData, sep+strlen(LOG_SEP)+msgLen); 
-                                break;
-                            }
-                            catch (LogToolError& e) {
-                                // was not handshake messge -> try next
-                            }
-                        }
-                    }
-                    tmp = sep+strlen(LOG_SEP)+msgLen;
-                }
-            }
-            else {
-                struct timeval timeout;
 
-                timeout.tv_sec = 0;
-                timeout.tv_usec = 10000; /* 10ms */
+        do {
+			unsigned int tries = 0;
 
-                SockSelect(0, NULL, NULL, NULL, &timeout);
-            }
+			while(receivedData.find(LOG_SEP, 0) == std::string::npos) {
+				if ( conn_.receive() ) {
+					receivedData += conn_.receivedData().str();
+				} else {
+					struct timeval timeout;
+
+					timeout.tv_sec = 0;
+					timeout.tv_usec = 10000; /* 10ms */
+
+					SockSelect(0, NULL, NULL, NULL, &timeout);
+
+					tries++;
+
+					if(tries > 100) {
+						/* Aproximately a second elapsed. don't loop forever! */
+						return (false);
+					}
+				}
+			}
+
+			size_t som, sep, tmp, msgLen;
+			size_t len = receivedData.length();
+
+			tmp = 0;
+			while ( (som=receivedData.find(LOG_SOM, tmp)) < len ) {
+				tmp = som+strlen(LOG_SOM);
+
+				if ( (sep=receivedData.find(LOG_SEP, tmp)) < len ) {
+					msgLen = strtoul(&receivedData[tmp],0,10);
+					if ( len-sep-strlen(LOG_SEP) >= msgLen ) {
+						try {
+							protocols = hsProt->parseHandshake(
+									std::string(receivedData,sep+strlen(LOG_SEP), msgLen));
+							finished = true;
+							//messages_ = std::string(receivedData, sep+strlen(LOG_SEP)+msgLen); 
+							break;
+						}
+						catch (LogToolError& e) {
+							// was not handshake messge -> try next
+						}
+					}
+				}
+				tmp = sep+strlen(LOG_SEP)+msgLen;
+			}
+            
         } while( !finished );
 
         iter = protocols.begin();
diff -ru logtool-2.2.2.orig/src/LogLine.cc logtool-2.2.2/src/LogLine.cc
--- logtool-2.2.2.orig/src/LogLine.cc	2009-03-10 13:25:11 +0100
+++ logtool-2.2.2/src/LogLine.cc	2009-03-10 15:08:27 +0100
@@ -120,9 +120,13 @@
     time_t  now = time(0);
     std::ofstream errFile;
 
+	#ifdef _WIN32
+	error = WSAGetLastError();
+	#else
     error = errno;
+	#endif
 
-    errFile.open(LOG_SERVERERRORS);
+    errFile.open(LOG_SERVERERRORS, std::ios_base::out | std::ios_base::app);
         
     if ( errFile.is_open() ) {
         errFile << getDateStr(now) << " "
diff -ru logtool-2.2.2.orig/src/LogServer.cc logtool-2.2.2/src/LogServer.cc
--- logtool-2.2.2.orig/src/LogServer.cc	2009-03-10 13:25:11 +0100
+++ logtool-2.2.2/src/LogServer.cc	2009-03-10 15:14:18 +0100
@@ -92,8 +92,12 @@
         /* check for new client */
         newClient = conn_.newClient(&readfd);
         if ( newClient != INVALID_SOCKET ) {
-            ClientHandlerPtr client(new ClientHandler(this, newClient));
-            clients_.push_back(client); 
+			try {
+				ClientHandlerPtr client(new ClientHandler(this, newClient));
+				clients_.push_back(client); 
+			} catch (LogToolError& e) {
+
+			}
         }
         else {
             if ( conn_.maxFD() ) {
