? .cproject
? cycletime.patch
Index: src/LogClientLogger.cc
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/LogClientLogger.cc,v
retrieving revision 1.19
diff -u -r1.19 LogClientLogger.cc
--- src/LogClientLogger.cc	22 Jul 2013 04:30:15 -0000	1.19
+++ src/LogClientLogger.cc	29 Jul 2013 06:22:34 -0000
@@ -69,9 +69,11 @@
             receiveData();
         }
         if ( ! conn_.connected() ) {
-            LogConfPtr conf(new LocalConf());
-            LogConfMgr::instance().conf(conf);
-            logMsg->message("<LOCAL_LOG> "+logMsg->message()+" <LOCAL_LOG>");
+        	if ( LogConfMgr::instance().conf() == 0 ) {
+        		LogConfPtr conf(new LocalConf());
+        		LogConfMgr::instance().conf(conf);
+        	}
+        	logMsg->message("<LOCAL_LOG> "+logMsg->message()+" <LOCAL_LOG>");
             LogWriter::instance().write(logMsg);
         } 
     } 
@@ -218,8 +220,10 @@
 
     if ( !checkConnection() ) {
         // use LocalConf if we are in local mode
-        LogConfPtr conf(new LocalConf());
-        LogConfMgr::instance().conf(conf);
+    	if ( LogConfMgr::instance().conf() == 0 ) {
+    		LogConfPtr conf(new LocalConf());
+    		LogConfMgr::instance().conf(conf);
+    	}
         return false;
     }
     
Index: src/LogServer.cc
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/LogServer.cc,v
retrieving revision 1.20
diff -u -r1.20 LogServer.cc
--- src/LogServer.cc	24 Aug 2012 10:45:47 -0000	1.20
+++ src/LogServer.cc	29 Jul 2013 06:22:34 -0000
@@ -91,8 +91,11 @@
         die(0);
         return (-1);
     }
-    
+
+    time_t outputtime=time(0);
     for( ;dyingCount_ == 0; ) {
+    	clock_t startclock=clock();
+
         LogConfMgr::instance().conf()->getConf();
 
         FD_ZERO(&readfd);
@@ -138,6 +141,18 @@
             }
             actClient++;
         }
+
+        clock_t endclock=clock();
+        double diffclock=1000.0 * (endclock-startclock) / CLOCKS_PER_SEC;
+        long ldiff=(long) diffclock;
+
+        time_t now=time(0);
+        if( ldiff >500 && ( now - outputtime ) >1 ) {
+        	outputtime=time(0);
+            std::ostringstream cycletime;
+        	cycletime<<" cycletime greater than 500 ms! it is: "<<ldiff<<" [ms]";
+        	writeError(cycletime.str());
+        }
     }
     die(0);
     return (0);
