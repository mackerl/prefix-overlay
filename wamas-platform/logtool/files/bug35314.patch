? .cproject
Index: src/ClientHandler.h
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/ClientHandler.h,v
retrieving revision 1.10
diff -u -r1.10 ClientHandler.h
--- src/ClientHandler.h	24 Aug 2012 10:56:34 -0000	1.10
+++ src/ClientHandler.h	6 Dec 2013 10:27:43 -0000
@@ -39,6 +39,7 @@
 		, server_(that.server_)
 		, confChangeNotified_(that.confChangeNotified_)
 		, confChanged_(that.confChanged_)
+		, creationTime_()
 	{}
 	ClientHandler& operator=(ClientHandler const& that)
 	{
Index: src/LocalConf.cc
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/LocalConf.cc,v
retrieving revision 1.1
diff -u -r1.1 LocalConf.cc
--- src/LocalConf.cc	30 Jan 2008 10:48:09 -0000	1.1
+++ src/LocalConf.cc	6 Dec 2013 10:27:43 -0000
@@ -29,19 +29,29 @@
 {
     static time_t   checkTime = 0;
     static time_t   modTime = 0;
-    time_t          now;
 
-    now = time(NULL);
-    if ( confFile_.empty()
-      || ((now  - checkTime) >= LOG_CHECKCONF)
-    ) {
-        struct stat     cfgStat;
-        int err = stat(confFile_.c_str(),&cfgStat);
-        time_t mTime = cfgStat.st_mtime;
+    bool emptyConfFile = confFile_.empty();
+    time_t          now=time(NULL);
+	struct stat     cfgStat={};
+
+	bool timeToCheck= (now  - checkTime) >= LOG_CHECKCONF;
+    bool doCheck = false;
+
+	if( !emptyConfFile && timeToCheck  ) {
+
+		int err = stat(confFile_.c_str(),&cfgStat);
+		time_t mTime = cfgStat.st_mtime;
+
+		if( (err < 0) ||
+			modTime < mTime ) {
+
+			doCheck=true;
+
+		}
+	}
+
+    if ( emptyConfFile || doCheck  ) {
 
-        if ( ( err < 0)
-          || (modTime < mTime)
-        ) {
             conf_.clear();
 
             confFile_ = searchConfFile(&cfgStat);
@@ -49,9 +59,10 @@
                 return (false);
             }
             modTime = cfgStat.st_mtime;
-        }
+
         checkTime = now;
     }
+
     return (true);
 }
 
Index: src/LogClientLogger.cc
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/LogClientLogger.cc,v
retrieving revision 1.21
diff -u -r1.21 LogClientLogger.cc
--- src/LogClientLogger.cc	14 Aug 2013 07:13:10 -0000	1.21
+++ src/LogClientLogger.cc	6 Dec 2013 10:27:43 -0000
@@ -73,7 +73,7 @@
         		LogConfPtr conf(new LocalConf());
         		LogConfMgr::instance().conf(conf);
         	}
-        	logMsg->message("<LOCAL_> "+logMsg->message() );
+        	logMsg->message("<LOC_> "+logMsg->message() );
             LogWriter::instance().write(logMsg);
         } 
     } 
@@ -179,8 +179,18 @@
                         type = protV10->parse(std::string(receivedData, sep+strlen(LOG_SEP), msgLen));
                         switch (type) {
                         case LOGCONF_RESPONSE:
-                            LogConfMgr::instance().conf(protV10->logconf());
-							confUpdateRequested_ = false;
+                        	if ( !LogWriter::instance().amILogServer() ) {
+                                LogConfMgr::instance().conf(protV10->logconf());
+    							confUpdateRequested_ = false;
+                        	}else {
+                        		static bool receivedErrorAlreadyDisplayed=false;
+
+                        		if(!receivedErrorAlreadyDisplayed) {
+                        			std::string errorMsg="Logserver received LOGCONF_RESPONSE!";
+                        			LogWriter::instance().writeError(errorMsg);
+                        		}
+                        		receivedErrorAlreadyDisplayed=true;
+                        	}
                             break;
                         case LOGCONF_REQUEST:
 							/* The Logserver tells us to request new log-conf,
Index: src/LogWriter.cc
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/LogWriter.cc,v
retrieving revision 1.16
diff -u -r1.16 LogWriter.cc
--- src/LogWriter.cc	14 Aug 2013 13:37:38 -0000	1.16
+++ src/LogWriter.cc	6 Dec 2013 10:27:43 -0000
@@ -35,6 +35,7 @@
 
 bool LogWriter::write(MsgPtr msg)
 {
+	static bool confFileAlreadyLost=false;
     std::string logSpec;
     Actions ce;
     Actions::const_iterator iter;
@@ -44,12 +45,15 @@
     }
     
     if ( ! LogConfMgr::instance().conf()->getConf() ) {
-
-        std::string errorMsg= "\nLogWriter: can't get conf!\n"
-                 "May be logtool.cfg is in old style.\n"
-                 "Using default action!\n";
-        writeError(errorMsg);
+    	if( !confFileAlreadyLost ) {
+    		confFileAlreadyLost = true;
+    		std::string errorMsg= "\nLogWriter: can't get conf!\n"
+    				"May be logtool.cfg is in old style.\n"
+    				"Using default action!\n";
+    		writeError(errorMsg);
+    	}
     }
+
     if ( conf_ < LogConfMgr::instance().conf()->changeTime() ) {
         logCache_.reset();
         driver_->confChanged();
Index: src/MessageHandler.cc
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/MessageHandler.cc,v
retrieving revision 1.8
diff -u -r1.8 MessageHandler.cc
--- src/MessageHandler.cc	14 May 2012 13:17:53 -0000	1.8
+++ src/MessageHandler.cc	6 Dec 2013 10:27:43 -0000
@@ -25,31 +25,27 @@
 void MessageHandler::operator() ()
 {
     MsgPtr msg;
-    DriverPtr driver;
-    RemoteDriver* remote = (RemoteDriver*)-1; // FIXME
+    DriverPtr driver = LogWriter::instance().driver();;
     
-    driver = LogWriter::instance().driver();
     if ( driver != 0 ) {
-        remote = dynamic_cast<RemoteDriver*>(driver.get());
-    }
+    	RemoteDriver*remote = dynamic_cast<RemoteDriver*>(driver.get());
     
-    while ( server_->running() ) {
-        if ( server_->closeFD() ) {
-            /* LogServer can't open socket for new client
-             * -> close some LogFiles
-             */
-            if ( remote != 0 ) {
-                remote->closeFD();
-                server_->closeFD(false);
-            }
-        }
-		LogWriter::instance().dumpStat();
-        remote->syncFiles();
-        msg = server_->pop(); 
-        if ( msg != 0 ) {
-            LogWriter::instance().write(msg);
+        while ( server_->running() ) {
+        	if ( server_->closeFD() ) {
+        		/* LogServer can't open socket for new client
+        		 * -> close some LogFiles
+        		 */
+        		remote->closeFD();
+        		server_->closeFD(false);
+        	}
+        	LogWriter::instance().dumpStat();
+        	remote->syncFiles();
+        	msg = server_->pop();
+        	if ( msg != 0 ) {
+        		LogWriter::instance().write(msg);
+        	}
         }
-    }  
+    }
 }
 
 } // /namespace
Index: src/logtool.cc
===================================================================
RCS file: /cvsrootb/saloon/wamas_x/utilities/logging/cpp/logtool/src/logtool.cc,v
retrieving revision 1.24
diff -u -r1.24 logtool.cc
--- src/logtool.cc	7 Jun 2010 10:09:00 -0000	1.24
+++ src/logtool.cc	6 Dec 2013 10:27:43 -0000
@@ -129,7 +129,7 @@
 
         case LOG_ID:
             /* don't save facility any more */
-            va_arg ( args, char * );
+            tmp=va_arg ( args, char * );
             break;
 
         case LOG_PFLOOR:
